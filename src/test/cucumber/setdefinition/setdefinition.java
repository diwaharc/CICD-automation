package test.cucumber.setdefinition;

import java.io.IOException;

import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import test.Confirmationpage;
import test.Landingpage;
import test.cartpage;
import test.checkoutpage;
import test.productcatalogue;
import test.suit.Baseclass;

public class setdefinition extends Baseclass{

	 public Landingpage landing;
	 productcatalogue productcatalogue ;
	 cartpage cartpage;
	
	 Confirmationpage Confirmationpage;
	 
	 
	 
	@Given("i landed  on  the ecommerce page")
	public void i_landed_the_ecommercepage() throws IOException
	{
		//launchapplication method will get url and open landing page 
		//assigning it to landing object so it can be used in next method to connect with next function 
		landing = launchapplication();
		
		
	}
	
	//below line with @given tag is a regular expression (regex) that tells Cucumber to capture dynamic values from the step in your .feature file.
	//round braces with double quotes start with ^ and end with $ and replacing user name and password from submitorder.feature file to (.+)
	@Given("^logged into to the page with (.+) and (.+)$")
	public void logged_into_the_page(String username , String password)
	{
		
		 productcatalogue = landing.logintoapplication(username, password);

		
		
	}
	@When("^the product (.+) is added to the cart$")
	public void product_is_added_to_the_cart(String product) throws InterruptedException
	{
		productcatalogue.addtoCart(product);
        Thread.sleep(2000);
		
	}
	
	@When("^Added (.+) is checkedout and submitted$")
	public void added_is_checkedout_submitted(String productname) throws InterruptedException
	
	{        
		
       
		
		 cartpage = productcatalogue.gotoCart();

		 //Boolean Actual = cartpage.selectedproducts(productname);
		 Thread.sleep(2000);
	    //Assert.assertTrue(Actual);
	    checkoutpage  checkoutpage = cartpage.checkout();
	    checkoutpage.selectcountry("india"); 
	     Confirmationpage = checkoutpage.Submitorder();
	        
		
	}
	
	//in submitorder.feature file we have used that string message , but here we are replacing with {string} below.
	//its not like above username and password dynamically generated we used regex (regular expression), here string message is directly given in that line in .feature file
	@Then("{string} message is displayed on confirmation page")
	public void message_is_displayed(String string)
	{
		   String order = Confirmationpage.Confirmation();
	        Assert.assertTrue(order.equalsIgnoreCase("Thankyou for the order.")) ;
	        driver.close();
	}
	
	//below method is specifically for errorvalidation.feature file , initialization of browser and sharing id and password are inherited from submitorder.feature file .
	//using submitorder.feature objects , only thing is we send username and password of errorvalidation.feature file , not from submitorder feature file.
	//we can also use {string} like we used in above method , here we have some symbols within "" , which was generated by "tidy gherkin" extension from google 
	@Then("^\"([^\"]*)\" message is displayed$")
	public void error_message_is_displayed(String string1)
	{
		Assert.assertEquals("Incorrect email or password.", landing.errormessage());
       driver.close();
	}
	
	
	
}




